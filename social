authentication.dart 

import 'package:firebase_auth/firebase_auth.dart'; 
import 'package:google_sign_in/google_sign_in.dart'; 
class AuthenticationHelper { 
final FirebaseAuth _auth = FirebaseAuth.instance; get user => _auth.currentUser; 
Future<String?> 
signInWithGoogle() async { final GoogleSignInAccount? googleUser = await GoogleSignIn().signIn(); 
finalGoogleSignInAuthentication? 
googleAuth = await googleUser?.authentication; 
finalcredential=GoogleAuthProvider.credential(accessToken: googleAuth?.accessToken, idToken: googleAuth?.idToken, 
); 
await FirebaseAuth.instance.signInWithCredential(credential
); return null; 
} 
Future<UserCredential> signInWithFacebook() async { 
    final LoginResult loginResult = await FacebookAuth.instance.login(); 
 
    final OAuthCredential facebookAuthCredential = FacebookAuthProvider.credential(loginResult.access Token.token); 
 
return FirebaseAuth.instance.signInWithCredential(facebookAuthCredential); 
} 
Future<String?> signUp({required String email, required String password}) async { try { 
await _auth.createUserWithEmailAndPassword
( email: email, 
password: password, 
); 
return null; 
} on FirebaseAuthException catch 
(e) { return e.message; 
} 
}  
Future<String?> signIn({required String email, required String password}) 
async { try { await _auth.signInWithEmailAndPassword(email: email, password: password); 
return null; 
} on FirebaseAuthException catch 
(e) { return e.message; 
} 
} 
Future<void> signOut() async { await_auth.signOut(); 
print('signout'); 
}
}

login.dart

import 'package:flutter/material.dart'; 
import './authentication.dart'; 
import'./home.dart'; import'./signup.dar; 
 
class Login extends 
StatelessWidget { 
@override 
Widget build(BuildContext context) 
{ 
return Scaffold( body: ListView( 
padding: 
EdgeInsets.all(8.0), children: <Widget>[ 
SizedBox(height: 80), 
Column( 
children: [ 
Image.asset('assets/images/logo.png')
, SizedBox(height: 50), 
Text( 'Welcome back!', 
style: TextStyle(fontSize: 24), 
), 
], 
), 
 
SizedBox( height: 
50, 
), 
 
Padding( 
padding: const EdgeInsets.all(16.0), child: 
LoginForm(), 
), 
SizedBox(height: 
20), Row( children: <Widget>[ 
SizedBox(width: 30), 
Text('New here ? ', style: TextStyle(fontWeight: FontWeight.bold, 
fontSize: 20)), GestureDetector( 
onTap: () { 
Navigator.pushReplacement(context,MaterialPageRoute(builder: (context) => Signup())); 
}, 
child: Text('Get Registered Now..', 
style: TextStyle(fontSize: 20, color: Color(0xffef2e6c))), 
) 
], ), 
Row( children: <Widget>[ 
SizedBox(width: 30), 
GestureDetector( onTap: () { 
AuthenticationHelper() 
.signInWithGoogle() 
.then((result) { if (result == null) { 
Navigator.pushReplacement(con
text, 
MaterialPageRoute(builder: (context) => MyApp())); 
} else { 
ScaffoldMessenger.of(context).showSnackBar(Snac kBar( content: Text( result, style: TextStyle(fontSize: 16), 
), 
)); 
} 
}); 
}, 
child: Text('Sign in with Google', 
style: TextStyle(fontSize: 20, color: Color(0xffef2e6c))), 
) 
], 
), 
], 
), 
); 
} 
 
} 
 
class LoginForm extends StatefulWidget { LoginForm({Key? 
key}) : super(key: key); 
 
@override 
_LoginFormState createState() => _LoginFormState(); 
} 
 
class _LoginFormState extends 
State<LoginForm> { final _formKey = 
GlobalKey<FormState>(); 
 
String? email; 
String?password; 
bool_obscureText = true; 
@override 
Widget build(BuildContext context) { return Form( key: _formKey, child: 
Column( mainAxisAlignnt: 
MainAxisAlignment.spaceAround, children: 
<Widget>[ 
TextFormField( 
            decoration: InputDecoration( 
prefixIcon: 
Icon(Icons.email_outlined,color:Colors.black), 
labelText: 'Email', labelStyle: TextStyle(color: Color(0xffef2e6c), 
), 
enabledBorder: OutlineInputBorder( borderRadius: BorderRadius.all( const 
Radius.circular(100.0), 
), 
), 
focusedBorder: OutlineInputBorder( borderRadius: 
BorderRadius.all( const 
Radius.circular(100.0), 
), 
borderSide: BorderSide(color: Color(0xffef2e6c) ), 
 
), 
), 
validator: (value) { 
if (value!.isEmpty) { 
return 'Please enter some text'; 
} return null; 
}, 
onSaved: (val) 
{ email = val; 
}, 
), 
SizedBox( height: 
20, 
), 
 
TextFormField( 
'Input text', decoration: InputDecoration( labelText: 'Password', labelStyle: TextStyle( 
color: Color(0xffef2e6c), 
), 
prefixIcon: 
Icon(Icons.lock_outline,color:Colors.black), enabledBorder: OutlineInputBorder( 
borderRadius: 
BorderRadius.all( const 
Radius.circular(100.0), 
), 
), 
focusedBorder: OutlineInputBorder( borderRadius: BorderRadius.all( const 
Radius.circular(100.0), 
), 
borderSide: BorderSide(color: Color(0xffef2e6c) ), 
 
), 
suffixIcon: 
GestureDetector( onTap: 
() { 
setState(() { 
_obscureText = !_obscureText; 
}); 
}, 
child: Icon( 
_obscureText ? Icons.visibility_off : Icons.visibility, 
), 
), 
), 
obscureText: _obscureText, onSaved: 
(val) { 
password = val; 
}, 
validator: (value) { 
if (value!.isEmpty) { 
return 'Please enter some text'; 
} return null; 
}, 
), 
SizedBox(height: 30), 
SizedBox( height: 54, width: 184, child: ElevatedButton( 
onPressed: () { 
if (_formKey.currentState!.validate()) { 
_formKey.currentState!.save(); 
 
AuthenticationHelper() 
.signIn(email: email!, password: password!) 
.then((result) { if (result == null) { 
Navigator.pushReplacement(cont
ext, 
MaterialPageRoute(builder: (context) => MyApp())); 
} else { 
ScaffoldMessenger.of(context).showSnackBar(Sn ackBar( content: Text( 
result, style: TextStyle(fontSize: 16), 
), 
)); 
} 
}); 
} 
}, 
style: ElevatedButton.styleFrom( 
shape: 
RoundedRectangleBorder( borderRadius: 
BorderRadius.all(Radius.circular(24.0))), backgroundColor: Color(0xffef2e6c)), child: 
Text( 'Login', style: TextStyle(fontSize: 24), 
), 
), 
), 
], 
), 
); 
} 
} 
